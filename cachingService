import java.util.Date;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;

public class CachingService {

    private static final ReentrantLock LOCKER = new ReentrantLock();
    private static final ScheduledExecutorService SES = Executors.newScheduledThreadPool(1);
    private static String texts;
    private static final int hoursOfClearing = 23;
    private static final int minutesOfClearing = 59;
    private static final int secondsOfClearing = 59;

    static {
        runClearingCacheTask();
    }

    public static String getData() {

        if (texts == null) {
            try {
                LOCKER.lock();

                if (texts == null) {
                    String dataFromServer = getDataFromServer();
                    texts = dataFromServer;
                }
            } finally {
                LOCKER.unlock();
            }
        }

        return texts;
    }

    private static String getDataFromServer() {
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!DATA FROM SERVER");
        return "alotoftexts";
    }

    private static long getTimeDifference() {
        Date dateNow = new Date();
        int yearNow = dateNow.getYear();
        int monthNow = dateNow.getMonth();
        int dayNow = dateNow.getDate();

        Date dateUntil = new Date(yearNow, monthNow, dayNow, hoursOfClearing, minutesOfClearing, secondsOfClearing);

        long timeInMillisNow = dateNow.getTime();
        long timeInMillisUntil = dateUntil.getTime();

        long timeDifference = timeInMillisUntil - timeInMillisNow;
        return timeDifference;
    }

    private static void runClearingCacheTask() {
        System.out.println("runClearingCacheTask initializing....");
        SES.scheduleAtFixedRate(
                new Runnable() {
                    @Override
                    public void run() {
                        System.out.println("The clearing cache task is in the processing...");
                        texts = null;
                        System.out.println("The clearing cache task successfully completed!");
                    }
                },
                getTimeDifference(),
                86400000,
                TimeUnit.MILLISECONDS
        );
        System.out.println("runClearingCacheTask successfully initialized!");
    }
}





import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class Main {
    private static final ExecutorService ES = Executors.newCachedThreadPool();
    private static final CountDownLatch LATCH = new CountDownLatch(1);

    public static void main(String[] args) {

        for (int j = 0; j < 100; j++) {
            ES.submit(() -> {
                try {
                    LATCH.await();
                    String t = Thread.currentThread().getName();
                    while (true) {
                        System.out.println("RESULT" + t + "=" + CachingService.getData());
                        TimeUnit.SECONDS.sleep(1L);
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
        }

        LATCH.countDown();
    }
}
