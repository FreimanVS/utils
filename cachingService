import java.util.Calendar;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;

public class CachingService<T> {

    private static final ReentrantLock LOCKER = new ReentrantLock();
    private static final ScheduledExecutorService SES = Executors.newScheduledThreadPool(1);
    private T object;
    private static final int hoursOfClearing = 23;
    private static final int minutesOfClearing = 59;
    private static final int secondsOfClearing = 59;

    {
        runClearingCacheTask();
    }

    public T getData(Supplier<? extends T> getDataFromServer) {

        if (object == null) {
            try {
                LOCKER.lock();

                if (object == null) {
                    T dataFromServer = getDataFromServer.get();
                    object = dataFromServer;
                }
            } finally {
                LOCKER.unlock();
            }
        }

        return object;
    }

    private long getTimeDifference() {
        Calendar dateNow = Calendar.getInstance();
        int yearNow = dateNow.get(Calendar.YEAR) - 1900;
        int monthNow = dateNow.get(Calendar.MONTH);
        int dayNow = dateNow.get(Calendar.DAY_OF_MONTH);

//        Date dateUntil = new Date(yearNow, monthNow, dayNow, hoursOfClearing, minutesOfClearing, secondsOfClearing);
        Calendar dateUntil = Calendar.getInstance();
        dateUntil.set(yearNow + 1900, monthNow, dayNow, hoursOfClearing, minutesOfClearing, secondsOfClearing);

        long timeInMillisNow = dateNow.getTimeInMillis();
        long timeInMillisUntil = dateUntil.getTimeInMillis();

        long timeDifference = timeInMillisUntil - timeInMillisNow;
        return timeDifference;
    }

    private void runClearingCacheTask() {
        System.out.println("runClearingCacheTask initializing....");
        SES.scheduleAtFixedRate(
                new Runnable() {
                    @Override
                    public void run() {
                        System.out.println("The clearing cache task is in the processing...");
                        object = null;
                        System.out.println("The clearing cache task successfully completed!");
                    }
                },
                getTimeDifference(),
                86400000,
                TimeUnit.MILLISECONDS
        );
        System.out.println("runClearingCacheTask successfully initialized!");
    }

    public interface Supplier<T> {
        T get();
    }

//    private long getTimeDifference() {
//        Date dateNow = new Date();
//        int yearNow = dateNow.getYear();
//        int monthNow = dateNow.getMonth();
//        int dayNow = dateNow.getDate();
//
//        Date dateUntil = new Date(yearNow, monthNow, dayNow, hoursOfClearing, minutesOfClearing, secondsOfClearing);
//
//        long timeInMillisNow = dateNow.getTime();
//        long timeInMillisUntil = dateUntil.getTime();
//
//        long timeDifference = timeInMillisUntil - timeInMillisNow;
//        return timeDifference;
//    }
}





import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class Main {
    private static final ExecutorService ES = Executors.newCachedThreadPool();
    private static final CountDownLatch LATCH = new CountDownLatch(1);
    private CachingService<String> cachingService = new CachingService<>();

    public void main() {
        for (int j = 0; j < 100; j++) {
            ES.submit(new Runnable() {
                @Override
                public void run() {
                    try {
                        LATCH.await();
                        String t = Thread.currentThread().getName();
                        while (true) {
                            System.out.println("RESULT" + t + "=" + cachingService.getData(new CachingService.Supplier<String>() {
                                @Override
                                public String get() {
                                    System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!DATA FROM SERVER");
                                    return "alotoftexts";
                                }
                            }));
                            TimeUnit.SECONDS.sleep(1L);
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            });
        }

        LATCH.countDown();
    }

    public static void main(String[] args) {
        new Main().main();
    }
}
