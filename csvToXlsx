import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class CsvToXslx {
    public static void main(String[] args) {
        try {

            List<Data> objects = csvToListOfObjects(
                    "./csv",
                    pathName -> {
                        try {
                            return csvToObject(
                                    pathName,
                                    ";",
                                    (key, value, data) -> {
                                        if ("key1".equals(key))
                                            data.setValue1(value);

                                        if ("key2".equals(key))
                                            data.setValue2(value);

                                        if ("ключ3".equals(key))
                                            data.setValue3(value);
                                    }
                            );
                        } catch (IOException e) {
                            e.printStackTrace();
                            return null;
                        }
                    }
            );

            objToXlsx(
                    new String[]{ "Key1", "Key2", "Ключ3"},

                    (row, o) -> {
                        row.createCell(0).setCellValue(o.getValue1());
                        row.createCell(1).setCellValue(o.getValue2());
                        row.createCell(2).setCellValue(o.getValue3());
                    },

                    objects,

                    "./csv/1.xlsx");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static List<Data> csvToListOfObjects(String folderPath, Function<String, Data> function) {
        try (Stream<Path> paths = Files.walk(Paths.get(folderPath))) {
            return paths
                    .filter(Files::isRegularFile)
                    .filter(p -> p.toString().endsWith(".csv"))
                    .map(Path::toString)
                    .map(function)
                    .collect(Collectors.toList());
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    private static Data csvToObject(String csvPath, String splitChar, TriConsumer<String, String, Data> triConsumer) throws IOException {
        try (BufferedReader reader = Files.newBufferedReader(Paths.get(csvPath), StandardCharsets.UTF_8)) {
            Data data = new Data();
            String line;
            while ((line = reader.readLine()) != null) {
                String[] split = line.split(splitChar);
                String key = split[0];
                String value = split[1];

                triConsumer.accept(key, value, data);
            }
            return data;
        }
    }

    public interface TriConsumer<K, V, S> {
        void accept(K var1, V var2, S var3);
    }

    private static void objToXlsx(String[] titleColumns, BiConsumer<Row, Data> dataColumns, List<Data> objects, String xlsxPath) throws IOException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Data");

        fillTitleColumns(workbook, sheet, titleColumns);
        fillDataColumns(objects, sheet, dataColumns);
        resize(titleColumns, sheet);
        writeToFile(xlsxPath, workbook);
    }

    private static void fillTitleColumns(Workbook workbook, Sheet sheet, String[] titleColumns) {
        Row headerRow = sheet.createRow(0);
        for (int i = 0; i < titleColumns.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(titleColumns[i]);
            cell.setCellStyle(style(workbook));
        }
    }

    private static CellStyle style(Workbook workbook) {
        Font headerFont = workbook.createFont();
        headerFont.setBold(true);
        headerFont.setFontHeightInPoints((short) 14);
        headerFont.setColor(IndexedColors.RED.getIndex());
        CellStyle headerCellStyle = workbook.createCellStyle();
        headerCellStyle.setFont(headerFont);
        return headerCellStyle;
    }

    private static void fillDataColumns(List<Data> objects, Sheet sheet, BiConsumer<Row, Data> dataColumns) {
        int rowNum = 1;
        for (Data obj : objects) {
            Row row = sheet.createRow(rowNum++);
            dataColumns.accept(row, obj);
        }
    }

    private static void resize(String[] titleColumns, Sheet sheet) {
        for (int i = 0; i < titleColumns.length; i++) {
            sheet.autoSizeColumn(i);
        }
    }

    private static void writeToFile(String xlsxPath, Workbook workbook) throws IOException {
        try (FileOutputStream fileOut = new FileOutputStream(xlsxPath)) {
            workbook.write(fileOut);
        }
    }
    
    
    
    
    import java.util.Objects;

public class Data {
    private String  value1;
    private String  value2;
    private String  value3;

    public Data() {}

    public Data(String value1, String value2, String value3) {
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    }

    public String getValue1() {
        return value1;
    }

    public void setValue1(String value1) {
        this.value1 = value1;
    }

    public String getValue2() {
        return value2;
    }

    public void setValue2(String value2) {
        this.value2 = value2;
    }

    public String getValue3() {
        return value3;
    }

    public void setValue3(String value3) {
        this.value3 = value3;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Data data = (Data) o;
        return Objects.equals(value1, data.value1) &&
                Objects.equals(value2, data.value2) &&
                Objects.equals(value3, data.value3);
    }

    @Override
    public int hashCode() {
        return Objects.hash(value1, value2, value3);
    }

    @Override
    public String toString() {
        return "Data{" +
                "value1='" + value1 + '\'' +
                ", value2='" + value2 + '\'' +
                ", value3='" + value3 + '\'' +
                '}';
    }
}





<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi</artifactId>
    <version>4.1.1</version>
</dependency>
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>4.1.1</version>
</dependency>




<project.java.version>1.8</project.java.version>
<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

<finalName>totallybot</finalName>
<sourceDirectory>src/main/java</sourceDirectory>
<testSourceDirectory>src/test/java</testSourceDirectory>
<testResources>
    <testResource>
        <directory>src/test/resources</directory>
    </testResource>
</testResources>
<plugins>
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.7.0</version>
        <configuration>
            <source>${project.java.version}</source>
            <target>${project.java.version}</target>
            <encoding>${project.build.sourceEncoding}</encoding>
        </configuration>
    </plugin>
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.0.2</version>
        <configuration>
            <encoding>${project.build.sourceEncoding}</encoding>
        </configuration>
    </plugin>
    <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.0.0</version>
        <configuration>
            <warSourceDirectory>src/main/webapp</warSourceDirectory>
        </configuration>
    </plugin>
